name: 'Build and run tests'

concurrency: 
  group: build

on:
  pull_request:
  push:
    branches:
      - master
      - 'releases/*'
    paths:
      - "**.ts"
      - "**.json"
      - ".github/workflows/test.yml"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-
      - run: npm install
      - run: npm run build
      # Currently we don't want to commit dist folder
      - uses: ./
        id: "check-success"
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          currentRunId: 0  # we give an invalid run id which results in finding this current run as running, therefore reporting running job found.
          runnerLabel: "ubuntu-latest"
      - uses: ./
        id: "check-failed"
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          currentRunId: ${{ github.run_id }} # we give this run id as current run id, usually there shouldn't be any other workfolows running in this repo
          runnerLabel: "ubuntu-latest"
      - name: Validate Result (If Statement)
        # Example how to check the output with an if statement in GitHub actions. Note that we can't check for a boolean (true) but have to check for string ('true')
        if: ${{ steps.check-success.outputs.foundRunningJob == 'true' && steps.check-failed.outputs.foundRunningJob == 'false'}}
        run: exit 0
      - name: Validate Result (Shell)
        # Example how we can test the output with bash. It's possible to either check for true (boolean) or 'true' (string)
        run: |
          if [ '${{ steps.check-success.outputs.foundRunningJob }}' == true -a '${{ steps.check-failed.outputs.foundRunningJob }}' == false -a '${{ steps.check-success.outputs.foundRunningJob }}' == 'true' -a '${{ steps.check-failed.outputs.foundRunningJob }}' == 'false' ]; then
            exit 0
          else
            exit 1
          fi

